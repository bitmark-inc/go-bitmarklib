package bitmarklib

import (
	"bytes"

	"golang.org/x/crypto/nacl/box"
	"golang.org/x/crypto/nacl/secretbox"
)

var (
	seedNonce = [24]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	}
	authSeedCountBM = [16]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe7,
	}
	encrSeedCountBM = [16]byte{
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe8,
	}
)

type EncrKeyPair struct {
	PrivateKey *[32]byte
	PublicKey  *[32]byte
}

func NewEncrKeyPairFromSeed(seed []byte) (*EncrKeyPair, error) {
	var secretKey [32]byte
	copy(secretKey[:], seed)

	encryptedEncrSeed := secretbox.Seal([]byte{}, encrSeedCountBM[:], &seedNonce, &secretKey)

	pub, pvt, err := box.GenerateKey(bytes.NewBuffer(encryptedEncrSeed))
	if err != nil {
		return nil, err
	}

	return &EncrKeyPair{PrivateKey: pvt, PublicKey: pub}, nil
}
